##
## This test case comes from the file below.
## #include <stdio.h>
##
##char *foo = "hello";
##
##void test_cf(char *arg, int val1, int val2) {
##switch(val1) {
##  case 0: 
##  case 1: 
##   arg = arg + 3;
##  if (val1) {
##     if (val2) arg = 0x9999999999999;
##     else 
##       if (val2) arg=0x10;
##  }
##    printf("\n Bad %c", *arg); // crash here bt #0
##  break;
##  case 2: printf("\n Good %c", *arg);
##  break;
##  default: ;
##} 
## 
##}
##
##int main() {
## char *good = foo;
## test_cf(good,1,1000); // bt #2
## return 0;
##}

# RUN: %llvm-crash-analyzer-ta %s | FileCheck %s
# CHECK: Blame Function is test_cf 

--- |
  ; ModuleID = 'test4a'
  source_filename = "test4a"
  target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
  
  ; Materializable
  define void @main() !dbg !2 {
  entry:
    unreachable
  }
  
  declare void @test_cf()
  
  ; Materializable
  define void @test_cf.1() !dbg !5 {
  entry:
    unreachable
  }
  
  !llvm.dbg.cu = !{!0}
  
  !0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "llvm-crash-analyzer", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
  !1 = !DIFile(filename: "if-else.c", directory: "/")
  !2 = distinct !DISubprogram(name: "main", linkageName: "main", scope: null, file: !1, line: 1, type: !3, scopeLine: 1, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !4)
  !3 = !DISubroutineType(types: !4)
  !4 = !{}
  !5 = distinct !DISubprogram(name: "test_cf.1", linkageName: "test_cf.1", scope: null, file: !1, line: 1, type: !3, scopeLine: 1, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !4)

...
---
name:            test_cf.1
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
registers:       []
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
regInfo:         { GPRegs: 
    - { reg: rax, value: '0x0009999999999999' }
    - { reg: rbx, value: '0x0000000000000000' }
    - { reg: rcx, value: '0x00000000ffffffff' }
    - { reg: rdx, value: '0x00000000000003e8' }
    - { reg: rdi, value: '0x0000000000400758' }
    - { reg: rsi, value: '0x0000000000000001' }
    - { reg: rbp, value: '0x00007fff525b8af0' }
    - { reg: rsp, value: '0x00007fff525b8ad0' }
    - { reg: r8, value: '0x00007f5bb369ada0' }
    - { reg: r9, value: '0x00007f5bb369ada0' }
    - { reg: r10, value: '0x0000000000000000' }
    - { reg: r11, value: '0x00007f5bb345c630' }
    - { reg: r12, value: '0x00000000004004c0' }
    - { reg: r13, value: '0x00007fff525b8bf0' }
    - { reg: r14, value: '0x0000000000000000' }
    - { reg: r15, value: '0x0000000000000000' }
    - { reg: rip, value: '0x000000000040063f' }
    - { reg: rflags, value: '0x0000000000010206' }
    - { reg: cs, value: '0x0000000000000033' }
    - { reg: fs, value: '0x0000000000000000' }
    - { reg: gs, value: '0x0000000000000000' }
    - { reg: ss, value: '0x000000000000002b' }
    - { reg: ds, value: '0x0000000000000000' }
    - { reg: es, value: '0x0000000000000000' }
    - { reg: eax, value: '0x99999999' }
    - { reg: ebx, value: '0x00000000' }
    - { reg: ecx, value: '0xffffffff' }
    - { reg: edx, value: '0x000003e8' }
    - { reg: edi, value: '0x00400758' }
    - { reg: esi, value: '0x00000001' }
    - { reg: ebp, value: '0x525b8af0' }
    - { reg: esp, value: '0x525b8ad0' }
    - { reg: r8d, value: '0xb369ada0' }
    - { reg: r9d, value: '0xb369ada0' }
    - { reg: r10d, value: '0x00000000' }
    - { reg: r11d, value: '0xb345c630' }
    - { reg: r12d, value: '0x004004c0' }
    - { reg: r13d, value: '0x525b8bf0' }
    - { reg: r14d, value: '0x00000000' }
    - { reg: r15d, value: '0x00000000' }
    - { reg: ax, value: '0x9999' }
    - { reg: bx, value: '0x0000' }
    - { reg: cx, value: '0xffff' }
    - { reg: dx, value: '0x03e8' }
    - { reg: di, value: '0x0758' }
    - { reg: si, value: '0x0001' }
    - { reg: bp, value: '0x8af0' }
    - { reg: sp, value: '0x8ad0' }
    - { reg: r8w, value: '0xada0' }
    - { reg: r9w, value: '0xada0' }
    - { reg: r10w, value: '0x0000' }
    - { reg: r11w, value: '0xc630' }
    - { reg: r12w, value: '0x04c0' }
    - { reg: r13w, value: '0x8bf0' }
    - { reg: r14w, value: '0x0000' }
    - { reg: r15w, value: '0x0000' }
    - { reg: ah, value: '0x99' }
    - { reg: bh, value: '0x00' }
    - { reg: ch, value: '0xff' }
    - { reg: dh, value: '0x03' }
    - { reg: al, value: '0x99' }
    - { reg: bl, value: '0x00' }
    - { reg: cl, value: '0xff' }
    - { reg: dl, value: '0xe8' }
    - { reg: dil, value: '0x58' }
    - { reg: sil, value: '0x01' }
    - { reg: bpl, value: '0xf0' }
    - { reg: spl, value: '0xd0' }
    - { reg: r8l, value: '0xa0' }
    - { reg: r9l, value: '0xa0' }
    - { reg: r10l, value: '0x00' }
    - { reg: r11l, value: '0x30' }
    - { reg: r12l, value: '0xc0' }
    - { reg: r13l, value: '0xf0' }
    - { reg: r14l, value: '0x00' }
    - { reg: r15l, value: '0x00' } }
constants:       []
machineFunctionInfo: {}
crashOrder:     1
body:             |
  bb.0:
    successors: %bb.1(0x40000000), %bb.4(0x40000000)
    liveins: $rbp, $rdi, $esi, $edx
  
    PUSH64r $rbp, implicit-def $rsp, implicit $rsp, debug-location !DILocation(line: 5, scope: !5)
    $rbp = MOV64rr $rsp, debug-location !DILocation(line: 5, scope: !5)
    $rsp = SUB64ri8 $rsp, 32, implicit-def $eflags, debug-location !DILocation(line: 5, scope: !5)
    MOV64mr $rbp, 1, $noreg, -8, $noreg, $rdi, debug-location !DILocation(line: 5, scope: !5)
    MOV32mr $rbp, 1, $noreg, -12, $noreg, $esi, debug-location !DILocation(line: 5, scope: !5)
    MOV32mr $rbp, 1, $noreg, -16, $noreg, $edx, debug-location !DILocation(line: 5, scope: !5)
    $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg, debug-location !DILocation(line: 6, column: 8, scope: !5)
    $ecx = MOV32rr $eax, debug-location !DILocation(line: 6, column: 1, scope: !5)
    $ecx = SUB32ri8 $ecx, 2, implicit-def $eflags, debug-location !DILocation(line: 6, column: 1, scope: !5)
    MOV32mr $rbp, 1, $noreg, -20, $noreg, $eax, debug-location !DILocation(line: 6, column: 1, scope: !5)
    JCC_4 %bb.4, 2, implicit $eflags, debug-location !DILocation(line: 6, column: 1, scope: !5)
  
  bb.1:
    successors: %bb.2(0x80000000)
  
    JMP_4 %bb.2, debug-location !DILocation(line: 6, column: 1, scope: !5)
  
  bb.2:
    successors: %bb.3(0x40000000), %bb.11(0x40000000)
    liveins: $rbp
  
    $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg
    $eax = SUB32ri8 $eax, 2, implicit-def $eflags, debug-location !DILocation(line: 6, column: 1, scope: !5)
    JCC_4 %bb.11, 4, implicit $eflags, debug-location !DILocation(line: 6, column: 1, scope: !5)
  
  bb.3:
    successors: %bb.12(0x80000000)
  
    JMP_4 %bb.12, debug-location !DILocation(line: 6, column: 1, scope: !5)
  
  bb.4:
    successors: %bb.5(0x40000000), %bb.10(0x40000000)
    liveins: $rbp
  
    $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg, debug-location !DILocation(line: 9, column: 10, scope: !5)
    ADD64i32 3, implicit-def $rax, implicit-def $eflags, implicit $rax, debug-location !DILocation(line: 9, column: 14, scope: !5)
    MOV64mr $rbp, 1, $noreg, -8, $noreg, $rax, debug-location !DILocation(line: 9, column: 8, scope: !5)
    CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 0, implicit-def $eflags, debug-location !DILocation(line: 10, column: 7, scope: !5)
    JCC_4 %bb.10, 4, implicit $eflags, debug-location !DILocation(line: 10, column: 7, scope: !5)
  
  bb.5:
    successors: %bb.6(0x40000000), %bb.7(0x40000000)
    liveins: $rbp
  
    CMP32mi8 $rbp, 1, $noreg, -16, $noreg, 0, implicit-def $eflags, debug-location !DILocation(line: 12, column: 10, scope: !5)
    JCC_4 %bb.7, 4, implicit $eflags, debug-location !DILocation(line: 12, column: 10, scope: !5)
  
  bb.6:
    successors: %bb.9(0x80000000)
    liveins: $rbp
  
    $rax = MOV64ri 2702159776422297, debug-location !DILocation(line: 12, column: 20, scope: !5)
    MOV64mr $rbp, 1, $noreg, -8, $noreg, $rax, debug-location !DILocation(line: 12, column: 20, scope: !5)
    JMP_4 %bb.9, debug-location !DILocation(line: 12, column: 16, scope: !5)
  
  bb.7:
    successors: %bb.8(0x80000000)
    liveins: $rbp
  
    CMP32mi8 $rbp, 1, $noreg, -16, $noreg, 0, implicit-def $eflags, debug-location !DILocation(line: 14, column: 12, scope: !5)
    JCC_4 %bb.8, 4, implicit $eflags, debug-location !DILocation(line: 14, column: 12, scope: !5)
  
  bb.8:
    successors: %bb.9(0x80000000)
    liveins: $rbp, $rax
  
    $eax = MOV32ri 16, debug-location !DILocation(line: 14, column: 21, scope: !5)
    MOV64mr $rbp, 1, $noreg, -8, $noreg, $rax, debug-location !DILocation(line: 14, column: 21, scope: !5)
    JMP_4 %bb.9
  
  bb.9:
    successors: %bb.10(0x80000000)
  
    JMP_4 %bb.10, debug-location !DILocation(line: 15, column: 3, scope: !5)
  
  bb.10:
    successors: %bb.13(0x80000000)
    liveins: $rbp
  
    $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg, debug-location !DILocation(line: 16, column: 26, scope: !5)
    $esi = crash-start MOVSX32rm8 $rax, 1, $noreg, 0, $noreg, debug-location !DILocation(line: 16, column: 25, scope: !5)
    $rdi = MOV64ri 4196190, debug-location !DILocation(line: 16, column: 5, scope: !5)
    $al = MOV8ri 0, debug-location !DILocation(line: 16, column: 5, scope: !5)
    CALL64pcrel32 4195504, implicit $rsp, implicit $ssp, debug-location !DILocation(line: 16, column: 5, scope: !5)
    JMP_4 %bb.13, debug-location !DILocation(line: 17, column: 3, scope: !5)
  
  bb.11:
    successors: %bb.13(0x80000000)
    liveins: $rbp
  
    $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg, debug-location !DILocation(line: 18, column: 33, scope: !5)
    $esi = MOVSX32rm8 $rax, 1, $noreg, 0, $noreg, debug-location !DILocation(line: 18, column: 32, scope: !5)
    $rdi = MOV64ri 4196199, debug-location !DILocation(line: 18, column: 11, scope: !5)
    $al = MOV8ri 0, debug-location !DILocation(line: 18, column: 11, scope: !5)
    CALL64pcrel32 4195504, implicit $rsp, implicit $ssp, debug-location !DILocation(line: 18, column: 11, scope: !5)
    JMP_4 %bb.13, debug-location !DILocation(line: 19, column: 3, scope: !5)
  
  bb.12:
    successors: %bb.13(0x80000000)
  
    JMP_4 %bb.13, debug-location !DILocation(line: 21, column: 1, scope: !5)
  
  bb.13:
    $rsp = ADD64ri8 $rsp, 32, implicit-def $eflags, debug-location !DILocation(line: 23, column: 1, scope: !5)
    $rbp = POP64r implicit-def $rsp, implicit $rsp, debug-location !DILocation(line: 23, column: 1, scope: !5)
    RETQ debug-location !DILocation(line: 23, column: 1, scope: !5)

...
---
name:            main
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
registers:       []
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
regInfo:         { GPRegs: 
    - { reg: rax, value: '' }
    - { reg: rbx, value: '0x0000000000000000' }
    - { reg: rcx, value: '' }
    - { reg: rdx, value: '' }
    - { reg: rdi, value: '' }
    - { reg: rsi, value: '' }
    - { reg: rbp, value: '0x00007fff525b8b10' }
    - { reg: rsp, value: '0x00007fff525b8b00' }
    - { reg: r8, value: '' }
    - { reg: r9, value: '' }
    - { reg: r10, value: '' }
    - { reg: r11, value: '' }
    - { reg: r12, value: '0x00000000004004c0' }
    - { reg: r13, value: '0x00007fff525b8bf0' }
    - { reg: r14, value: '0x0000000000000000' }
    - { reg: r15, value: '0x0000000000000000' }
    - { reg: rip, value: '0x00000000004006ae' }
    - { reg: rflags, value: '' }
    - { reg: cs, value: '' }
    - { reg: fs, value: '' }
    - { reg: gs, value: '' }
    - { reg: ss, value: '' }
    - { reg: ds, value: '' }
    - { reg: es, value: '' }
    - { reg: eax, value: '' }
    - { reg: ebx, value: '0x00000000' }
    - { reg: ecx, value: '' }
    - { reg: edx, value: '' }
    - { reg: edi, value: '' }
    - { reg: esi, value: '' }
    - { reg: ebp, value: '0x525b8af0' }
    - { reg: esp, value: '0x525b8ad0' }
    - { reg: r8d, value: '' }
    - { reg: r9d, value: '' }
    - { reg: r10d, value: '' }
    - { reg: r11d, value: '' }
    - { reg: r12d, value: '' }
    - { reg: r13d, value: '' }
    - { reg: r14d, value: '' }
    - { reg: r15d, value: '' }
    - { reg: ax, value: '' }
    - { reg: bx, value: '' }
    - { reg: cx, value: '' }
    - { reg: dx, value: '' }
    - { reg: di, value: '' }
    - { reg: si, value: '' }
    - { reg: bp, value: '' }
    - { reg: sp, value: '0x8ad0' }
    - { reg: r8w, value: '' }
    - { reg: r9w, value: '' }
    - { reg: r10w, value: '' }
    - { reg: r11w, value: '' }
    - { reg: r12w, value: '' }
    - { reg: r13w, value: '' }
    - { reg: r14w, value: '' }
    - { reg: r15w, value: '' }
    - { reg: ah, value: '' }
    - { reg: bh, value: '' }
    - { reg: ch, value: '' }
    - { reg: dh, value: '' }
    - { reg: al, value: '' }
    - { reg: bl, value: '' }
    - { reg: cl, value: '' }
    - { reg: dl, value: '' }
    - { reg: dil, value: '' }
    - { reg: sil, value: '' }
    - { reg: bpl, value: '' }
    - { reg: spl, value: '' }
    - { reg: r8l, value: '' }
    - { reg: r9l, value: '' }
    - { reg: r10l, value: '' }
    - { reg: r11l, value: '' }
    - { reg: r12l, value: '' }
    - { reg: r13l, value: '' }
    - { reg: r14l, value: '' }
    - { reg: r15l, value: '' } }
constants:       []
machineFunctionInfo: {}
crashOrder:     2
body:             |
  bb.0:
    liveins: $rbp
  
    PUSH64r $rbp, implicit-def $rsp, implicit $rsp, debug-location !DILocation(line: 25, scope: !2)
    $rbp = MOV64rr $rsp, debug-location !DILocation(line: 25, scope: !2)
    $rsp = SUB64ri8 $rsp, 16, implicit-def $eflags, debug-location !DILocation(line: 25, scope: !2)
    MOV32mi $rbp, 1, $noreg, -4, $noreg, 0, debug-location !DILocation(line: 25, scope: !2)
    $rax = MOV64rm $noreg, 1, $noreg, 6295592, $noreg, debug-location !DILocation(line: 26, column: 15, scope: !2)
    MOV64mr $rbp, 1, $noreg, -16, $noreg, $rax, debug-location !DILocation(line: 26, column: 8, scope: !2)
    $rdi = MOV64rm $rbp, 1, $noreg, -16, $noreg, debug-location !DILocation(line: 27, column: 10, scope: !2)
    $esi = MOV32ri 1, debug-location !DILocation(line: 27, column: 2, scope: !2)
    $edx = MOV32ri 1000, debug-location !DILocation(line: 27, column: 2, scope: !2)
    CALL64pcrel32 @test_cf, csr_64, implicit $rsp, implicit $ssp, implicit-def $eax, implicit-def $eax, debug-location !DILocation(line: 27, column: 2, scope: !2)
    $eax = crash-start XOR32rr undef $eax, undef $eax, implicit-def $eflags, debug-location !DILocation(line: 27, column: 2, scope: !2)
    $rsp = ADD64ri8 $rsp, 16, implicit-def $eflags, debug-location !DILocation(line: 28, column: 2, scope: !2)
    $rbp = POP64r implicit-def $rsp, implicit $rsp, debug-location !DILocation(line: 28, column: 2, scope: !2)
    RETQ debug-location !DILocation(line: 28, column: 2, scope: !2)

...
