## This is test case comming from:
## #include<stdio.h>
##
## typedef struct{
##     int *a;
##       float b;
## } T;
##
## float f() {
##   T p;
##   p.a = NULL;
##   g(&p);
##   return p.b;
## }
##
## g(T *q) {
##   int *t = q->a;
##   float fl = q->b;
##   if (fl > 0.0) {
##     q->b = 2.0;
##   }
##   else {
##     q->b = 3.0;
##   }
##
##
##   h(t);
## }
##
## h(int *r) {
##     *r = 0; // crash!!
## }
##
## main() {
##   float val = f();
##   printf("%f\n", val);
##   return 0;
## }

# RUN: %llvm-crash-analyzer-ta %s | FileCheck %s 
# CHECK: Blame Function is f

--- |
  ; ModuleID = 'example'
  source_filename = "example"
  target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
  
  ; Materializable
  define void @_start() {
  entry:
    unreachable
  }
  
  declare void @"__libc_start_main@plt"()
  
  ; Materializable
  define void @f() !dbg !2 {
  entry:
    unreachable
  }
  
  declare void @g()
  
  ; Materializable
  define void @g.1() !dbg !5 {
  entry:
    unreachable
  }
  
  declare void @h()
  
  ; Materializable
  define void @h.2() !dbg !6 {
  entry:
    unreachable
  }
  
  ; Materializable
  define void @main() !dbg !7 {
  entry:
    unreachable
  }
  
  declare void @"printf@plt"()
  
  !llvm.dbg.cu = !{!0}
  
  !0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "llvm-crash-analyzer", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
  !1 = !DIFile(filename: "/nobackup/djtodoro/llvm_trunk/NEW/llvm-crash-analyzer/CISCO-git/examples/fwd-analysis/example3.c", directory: "/")
  !2 = distinct !DISubprogram(name: "f", linkageName: "f", scope: null, file: !1, line: 1, type: !3, scopeLine: 1, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !4)
  !3 = !DISubroutineType(types: !4)
  !4 = !{}
  !5 = distinct !DISubprogram(name: "g.1", linkageName: "g.1", scope: null, file: !1, line: 1, type: !3, scopeLine: 1, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !4)
  !6 = distinct !DISubprogram(name: "h.2", linkageName: "h.2", scope: null, file: !1, line: 1, type: !3, scopeLine: 1, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !4)
  !7 = distinct !DISubprogram(name: "main", linkageName: "main", scope: null, file: !1, line: 1, type: !3, scopeLine: 1, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !4)

...
---
name:            h.2
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
registers:       []
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
regInfo:         { GPRegs: 
    - { reg: rax, value: '0x0000000000000000' }
    - { reg: rbx, value: '0x0000000000000000' }
    - { reg: rcx, value: '0x0000000000401260' }
    - { reg: rdx, value: '0x00007ffe988e8208' }
    - { reg: rdi, value: '0x0000000000000000' }
    - { reg: rsi, value: '0x00007ffe988e81f8' }
    - { reg: rbp, value: '0x00007ffe988e80a0' }
    - { reg: rsp, value: '0x00007ffe988e80a0' }
    - { reg: r8, value: '0x00007effe31ece80' }
    - { reg: r9, value: '0x0000000000000000' }
    - { reg: r10, value: '0x00007ffe988e7c60' }
    - { reg: r11, value: '0x00007effe2e46450' }
    - { reg: r12, value: '0x0000000000401060' }
    - { reg: r13, value: '0x00007ffe988e81f0' }
    - { reg: r14, value: '0x0000000000000000' }
    - { reg: r15, value: '0x0000000000000000' }
    - { reg: rip, value: '0x000000000040120c' }
    - { reg: rflags, value: '0x0000000000010242' }
    - { reg: cs, value: '0x0000000000000033' }
    - { reg: fs, value: '0x0000000000000000' }
    - { reg: gs, value: '0x0000000000000000' }
    - { reg: ss, value: '0x000000000000002b' }
    - { reg: ds, value: '0x0000000000000000' }
    - { reg: es, value: '0x0000000000000000' }
    - { reg: eax, value: '0x00000000' }
    - { reg: ebx, value: '0x00000000' }
    - { reg: ecx, value: '0x00401260' }
    - { reg: edx, value: '0x988e8208' }
    - { reg: edi, value: '0x00000000' }
    - { reg: esi, value: '0x988e81f8' }
    - { reg: ebp, value: '0x988e80a0' }
    - { reg: esp, value: '0x988e80a0' }
    - { reg: r8d, value: '0xe31ece80' }
    - { reg: r9d, value: '0x00000000' }
    - { reg: r10d, value: '0x988e7c60' }
    - { reg: r11d, value: '0xe2e46450' }
    - { reg: r12d, value: '0x00401060' }
    - { reg: r13d, value: '0x988e81f0' }
    - { reg: r14d, value: '0x00000000' }
    - { reg: r15d, value: '0x00000000' }
    - { reg: ax, value: '0x0000' }
    - { reg: bx, value: '0x0000' }
    - { reg: cx, value: '0x1260' }
    - { reg: dx, value: '0x8208' }
    - { reg: di, value: '0x0000' }
    - { reg: si, value: '0x81f8' }
    - { reg: bp, value: '0x80a0' }
    - { reg: sp, value: '0x80a0' }
    - { reg: r8w, value: '0xce80' }
    - { reg: r9w, value: '0x0000' }
    - { reg: r10w, value: '0x7c60' }
    - { reg: r11w, value: '0x6450' }
    - { reg: r12w, value: '0x1060' }
    - { reg: r13w, value: '0x81f0' }
    - { reg: r14w, value: '0x0000' }
    - { reg: r15w, value: '0x0000' }
    - { reg: ah, value: '0x00' }
    - { reg: bh, value: '0x00' }
    - { reg: ch, value: '0x12' }
    - { reg: dh, value: '0x82' }
    - { reg: al, value: '0x00' }
    - { reg: bl, value: '0x00' }
    - { reg: cl, value: '0x60' }
    - { reg: dl, value: '0x08' }
    - { reg: dil, value: '0x00' }
    - { reg: sil, value: '0xf8' }
    - { reg: bpl, value: '0xa0' }
    - { reg: spl, value: '0xa0' }
    - { reg: r8l, value: '0x80' }
    - { reg: r9l, value: '0x00' }
    - { reg: r10l, value: '0x60' }
    - { reg: r11l, value: '0x50' }
    - { reg: r12l, value: '0x60' }
    - { reg: r13l, value: '0xf0' }
    - { reg: r14l, value: '0x00' }
    - { reg: r15l, value: '0x00' } }
constants:       []
machineFunctionInfo: {}
crashOrder:     1
body:             |
  bb.0:
    liveins: $rbp, $rdi
  
    PUSH64r $rbp, implicit-def $rsp, implicit $rsp, debug-location !DILocation(line: 29, scope: !6)
    $rbp = MOV64rr $rsp, debug-location !DILocation(line: 29, scope: !6)
    MOV64mr $rbp, 1, $noreg, -16, $noreg, $rdi, debug-location !DILocation(line: 29, scope: !6)
    $rax = MOV64rm $rbp, 1, $noreg, -16, $noreg, debug-location !DILocation(line: 30, column: 6, scope: !6)
    crash-start MOV32mi $rax, 1, $noreg, 0, $noreg, 0, debug-location !DILocation(line: 30, column: 8, scope: !6)
    $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg, debug-location !DILocation(line: 31, column: 1, scope: !6)
    $rbp = POP64r implicit-def $rsp, implicit $rsp, debug-location !DILocation(line: 31, column: 1, scope: !6)
    RETQ debug-location !DILocation(line: 31, column: 1, scope: !6)

...
---
name:            g.1
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
registers:       []
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
regInfo:         { GPRegs: 
    - { reg: rax, value: '' }
    - { reg: rbx, value: '0x0000000000000000' }
    - { reg: rcx, value: '' }
    - { reg: rdx, value: '' }
    - { reg: rdi, value: '' }
    - { reg: rsi, value: '' }
    - { reg: rbp, value: '0x00007ffe988e80d0' }
    - { reg: rsp, value: '0x00007ffe988e80b0' }
    - { reg: r8, value: '' }
    - { reg: r9, value: '' }
    - { reg: r10, value: '' }
    - { reg: r11, value: '' }
    - { reg: r12, value: '0x0000000000401060' }
    - { reg: r13, value: '0x00007ffe988e81f0' }
    - { reg: r14, value: '0x0000000000000000' }
    - { reg: r15, value: '0x0000000000000000' }
    - { reg: rip, value: '0x00000000004011eb' }
    - { reg: rflags, value: '' }
    - { reg: cs, value: '' }
    - { reg: fs, value: '' }
    - { reg: gs, value: '' }
    - { reg: ss, value: '' }
    - { reg: ds, value: '' }
    - { reg: es, value: '' }
    - { reg: eax, value: '' }
    - { reg: ebx, value: '0x00000000' }
    - { reg: ecx, value: '' }
    - { reg: edx, value: '' }
    - { reg: edi, value: '' }
    - { reg: esi, value: '' }
    - { reg: ebp, value: '0x988e80a0' }
    - { reg: esp, value: '0x988e80a0' }
    - { reg: r8d, value: '' }
    - { reg: r9d, value: '' }
    - { reg: r10d, value: '' }
    - { reg: r11d, value: '' }
    - { reg: r12d, value: '' }
    - { reg: r13d, value: '' }
    - { reg: r14d, value: '' }
    - { reg: r15d, value: '' }
    - { reg: ax, value: '' }
    - { reg: bx, value: '' }
    - { reg: cx, value: '' }
    - { reg: dx, value: '' }
    - { reg: di, value: '' }
    - { reg: si, value: '' }
    - { reg: bp, value: '' }
    - { reg: sp, value: '0x80a0' }
    - { reg: r8w, value: '' }
    - { reg: r9w, value: '' }
    - { reg: r10w, value: '' }
    - { reg: r11w, value: '' }
    - { reg: r12w, value: '' }
    - { reg: r13w, value: '' }
    - { reg: r14w, value: '' }
    - { reg: r15w, value: '' }
    - { reg: ah, value: '' }
    - { reg: bh, value: '' }
    - { reg: ch, value: '' }
    - { reg: dh, value: '' }
    - { reg: al, value: '' }
    - { reg: bl, value: '' }
    - { reg: cl, value: '' }
    - { reg: dl, value: '' }
    - { reg: dil, value: '' }
    - { reg: sil, value: '' }
    - { reg: bpl, value: '' }
    - { reg: spl, value: '' }
    - { reg: r8l, value: '' }
    - { reg: r9l, value: '' }
    - { reg: r10l, value: '' }
    - { reg: r11l, value: '' }
    - { reg: r12l, value: '' }
    - { reg: r13l, value: '' }
    - { reg: r14l, value: '' }
    - { reg: r15l, value: '' } }
constants:       []
machineFunctionInfo: {}
crashOrder:     2
body:             |
  bb.0:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $rbp, $rdi
  
    PUSH64r $rbp, implicit-def $rsp, implicit $rsp, debug-location !DILocation(line: 15, scope: !5)
    $rbp = MOV64rr $rsp, debug-location !DILocation(line: 15, scope: !5)
    $rsp = SUB64ri8 $rsp, 32, implicit-def $eflags, debug-location !DILocation(line: 15, scope: !5)
    MOV64mr $rbp, 1, $noreg, -16, $noreg, $rdi, debug-location !DILocation(line: 15, scope: !5)
    $rax = MOV64rm $rbp, 1, $noreg, -16, $noreg, debug-location !DILocation(line: 16, column: 12, scope: !5)
    $rax = MOV64rm $rax, 1, $noreg, 0, $noreg, debug-location !DILocation(line: 16, column: 15, scope: !5)
    MOV64mr $rbp, 1, $noreg, -24, $noreg, $rax, debug-location !DILocation(line: 16, column: 8, scope: !5)
    $rax = MOV64rm $rbp, 1, $noreg, -16, $noreg, debug-location !DILocation(line: 17, column: 14, scope: !5)
    $xmm0 = MOVSSrm $rax, 1, $noreg, 8, $noreg, debug-location !DILocation(line: 17, column: 17, scope: !5)
    MOVSSmr $rbp, 1, $noreg, -28, $noreg, $xmm0, debug-location !DILocation(line: 17, column: 9, scope: !5)
    $xmm0 = MOVSSrm $rbp, 1, $noreg, -28, $noreg, debug-location !DILocation(line: 18, column: 7, scope: !5)
    $xmm0 = CVTSS2SDrr_Int $xmm0, $xmm0, implicit $mxcsr, debug-location !DILocation(line: 18, column: 7, scope: !5)
    $xmm1 = XORPSrr undef $xmm1, undef $xmm1, debug-location !DILocation(line: 18, column: 10, scope: !5)
    UCOMISDrr $xmm0, $xmm1, implicit-def $eflags, implicit $mxcsr, debug-location !DILocation(line: 18, column: 10, scope: !5)
    JCC_4 %bb.2, 6, implicit $eflags, debug-location !DILocation(line: 18, column: 7, scope: !5)
  
  bb.1:
    successors: %bb.3(0x80000000)
    liveins: $rip, $rbp
  
    $xmm0 = MOVSSrm $rip, 1, $noreg, 3665, $noreg
    $rax = MOV64rm $rbp, 1, $noreg, -16, $noreg, debug-location !DILocation(line: 19, column: 5, scope: !5)
    MOVSSmr $rax, 1, $noreg, 8, $noreg, $xmm0, debug-location !DILocation(line: 19, column: 10, scope: !5)
    JMP_4 %bb.3, debug-location !DILocation(line: 20, column: 3, scope: !5)
  
  bb.2:
    successors: %bb.3(0x80000000)
    liveins: $rip, $rbp
  
    $xmm0 = MOVSSrm $rip, 1, $noreg, 3639, $noreg
    $rax = MOV64rm $rbp, 1, $noreg, -16, $noreg, debug-location !DILocation(line: 22, column: 5, scope: !5)
    MOVSSmr $rax, 1, $noreg, 8, $noreg, $xmm0, debug-location !DILocation(line: 22, column: 10, scope: !5)
  
  bb.3:
    liveins: $rbp
  
    $rdi = MOV64rm $rbp, 1, $noreg, -24, $noreg, debug-location !DILocation(line: 26, column: 5, scope: !5)
    CALL64pcrel32 @h, csr_64, implicit $rsp, implicit $ssp, implicit-def $eax, debug-location !DILocation(line: 26, column: 3, scope: !5)
    $ecx = crash-start MOV32rm $rbp, 1, $noreg, -4, $noreg, debug-location !DILocation(line: 27, column: 1, scope: !5)
    MOV32mr $rbp, 1, $noreg, -32, $noreg, $eax, debug-location !DILocation(line: 27, column: 1, scope: !5)
    $eax = MOV32rr $ecx, debug-location !DILocation(line: 27, column: 1, scope: !5)
    $rsp = ADD64ri8 $rsp, 32, implicit-def $eflags, debug-location !DILocation(line: 27, column: 1, scope: !5)
    $rbp = POP64r implicit-def $rsp, implicit $rsp, debug-location !DILocation(line: 27, column: 1, scope: !5)
    RETQ debug-location !DILocation(line: 27, column: 1, scope: !5)

...
---
name:            f
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
registers:       []
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
regInfo:         { GPRegs: 
    - { reg: rax, value: '' }
    - { reg: rbx, value: '0x0000000000000000' }
    - { reg: rcx, value: '' }
    - { reg: rdx, value: '' }
    - { reg: rdi, value: '' }
    - { reg: rsi, value: '' }
    - { reg: rbp, value: '0x00007ffe988e80f0' }
    - { reg: rsp, value: '0x00007ffe988e80e0' }
    - { reg: r8, value: '' }
    - { reg: r9, value: '' }
    - { reg: r10, value: '' }
    - { reg: r11, value: '' }
    - { reg: r12, value: '0x0000000000401060' }
    - { reg: r13, value: '0x00007ffe988e81f0' }
    - { reg: r14, value: '0x0000000000000000' }
    - { reg: r15, value: '0x0000000000000000' }
    - { reg: rip, value: '0x0000000000401169' }
    - { reg: rflags, value: '' }
    - { reg: cs, value: '' }
    - { reg: fs, value: '' }
    - { reg: gs, value: '' }
    - { reg: ss, value: '' }
    - { reg: ds, value: '' }
    - { reg: es, value: '' }
    - { reg: eax, value: '' }
    - { reg: ebx, value: '0x00000000' }
    - { reg: ecx, value: '' }
    - { reg: edx, value: '' }
    - { reg: edi, value: '' }
    - { reg: esi, value: '' }
    - { reg: ebp, value: '0x988e80a0' }
    - { reg: esp, value: '0x988e80a0' }
    - { reg: r8d, value: '' }
    - { reg: r9d, value: '' }
    - { reg: r10d, value: '' }
    - { reg: r11d, value: '' }
    - { reg: r12d, value: '' }
    - { reg: r13d, value: '' }
    - { reg: r14d, value: '' }
    - { reg: r15d, value: '' }
    - { reg: ax, value: '' }
    - { reg: bx, value: '' }
    - { reg: cx, value: '' }
    - { reg: dx, value: '' }
    - { reg: di, value: '' }
    - { reg: si, value: '' }
    - { reg: bp, value: '' }
    - { reg: sp, value: '0x80a0' }
    - { reg: r8w, value: '' }
    - { reg: r9w, value: '' }
    - { reg: r10w, value: '' }
    - { reg: r11w, value: '' }
    - { reg: r12w, value: '' }
    - { reg: r13w, value: '' }
    - { reg: r14w, value: '' }
    - { reg: r15w, value: '' }
    - { reg: ah, value: '' }
    - { reg: bh, value: '' }
    - { reg: ch, value: '' }
    - { reg: dh, value: '' }
    - { reg: al, value: '' }
    - { reg: bl, value: '' }
    - { reg: cl, value: '' }
    - { reg: dl, value: '' }
    - { reg: dil, value: '' }
    - { reg: sil, value: '' }
    - { reg: bpl, value: '' }
    - { reg: spl, value: '' }
    - { reg: r8l, value: '' }
    - { reg: r9l, value: '' }
    - { reg: r10l, value: '' }
    - { reg: r11l, value: '' }
    - { reg: r12l, value: '' }
    - { reg: r13l, value: '' }
    - { reg: r14l, value: '' }
    - { reg: r15l, value: '' } }
constants:       []
machineFunctionInfo: {}
crashOrder:     3
body:             |
  bb.0:
    liveins: $rbp
  
    PUSH64r $rbp, implicit-def $rsp, implicit $rsp, debug-location !DILocation(line: 8, scope: !2)
    $rbp = MOV64rr $rsp, debug-location !DILocation(line: 8, scope: !2)
    $rsp = SUB64ri8 $rsp, 16, implicit-def $eflags, debug-location !DILocation(line: 8, scope: !2)
    MOV64mi32 $rbp, 1, $noreg, -16, $noreg, 0, debug-location !DILocation(line: 10, column: 7, scope: !2)
    $rdi = LEA64r $rbp, 1, $noreg, -16, $noreg, debug-location !DILocation(line: 11, column: 3, scope: !2)
    CALL64pcrel32 @g, csr_64, implicit $rsp, implicit $ssp, debug-location !DILocation(line: 11, column: 3, scope: !2)
    $xmm0 = crash-start MOVSSrm $rbp, 1, $noreg, -8, $noreg, debug-location !DILocation(line: 12, column: 12, scope: !2)
    $rsp = ADD64ri8 $rsp, 16, implicit-def $eflags, debug-location !DILocation(line: 12, column: 3, scope: !2)
    $rbp = POP64r implicit-def $rsp, implicit $rsp, debug-location !DILocation(line: 12, column: 3, scope: !2)
    RETQ debug-location !DILocation(line: 12, column: 3, scope: !2)

...
---
name:            main
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
registers:       []
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
regInfo:         { GPRegs: 
    - { reg: rax, value: '' }
    - { reg: rbx, value: '0x0000000000000000' }
    - { reg: rcx, value: '' }
    - { reg: rdx, value: '' }
    - { reg: rdi, value: '' }
    - { reg: rsi, value: '' }
    - { reg: rbp, value: '0x00007ffe988e8110' }
    - { reg: rsp, value: '0x00007ffe988e8100' }
    - { reg: r8, value: '' }
    - { reg: r9, value: '' }
    - { reg: r10, value: '' }
    - { reg: r11, value: '' }
    - { reg: r12, value: '0x0000000000401060' }
    - { reg: r13, value: '0x00007ffe988e81f0' }
    - { reg: r14, value: '0x0000000000000000' }
    - { reg: r15, value: '0x0000000000000000' }
    - { reg: rip, value: '0x0000000000401234' }
    - { reg: rflags, value: '' }
    - { reg: cs, value: '' }
    - { reg: fs, value: '' }
    - { reg: gs, value: '' }
    - { reg: ss, value: '' }
    - { reg: ds, value: '' }
    - { reg: es, value: '' }
    - { reg: eax, value: '' }
    - { reg: ebx, value: '0x00000000' }
    - { reg: ecx, value: '' }
    - { reg: edx, value: '' }
    - { reg: edi, value: '' }
    - { reg: esi, value: '' }
    - { reg: ebp, value: '0x988e80a0' }
    - { reg: esp, value: '0x988e80a0' }
    - { reg: r8d, value: '' }
    - { reg: r9d, value: '' }
    - { reg: r10d, value: '' }
    - { reg: r11d, value: '' }
    - { reg: r12d, value: '' }
    - { reg: r13d, value: '' }
    - { reg: r14d, value: '' }
    - { reg: r15d, value: '' }
    - { reg: ax, value: '' }
    - { reg: bx, value: '' }
    - { reg: cx, value: '' }
    - { reg: dx, value: '' }
    - { reg: di, value: '' }
    - { reg: si, value: '' }
    - { reg: bp, value: '' }
    - { reg: sp, value: '0x80a0' }
    - { reg: r8w, value: '' }
    - { reg: r9w, value: '' }
    - { reg: r10w, value: '' }
    - { reg: r11w, value: '' }
    - { reg: r12w, value: '' }
    - { reg: r13w, value: '' }
    - { reg: r14w, value: '' }
    - { reg: r15w, value: '' }
    - { reg: ah, value: '' }
    - { reg: bh, value: '' }
    - { reg: ch, value: '' }
    - { reg: dh, value: '' }
    - { reg: al, value: '' }
    - { reg: bl, value: '' }
    - { reg: cl, value: '' }
    - { reg: dl, value: '' }
    - { reg: dil, value: '' }
    - { reg: sil, value: '' }
    - { reg: bpl, value: '' }
    - { reg: spl, value: '' }
    - { reg: r8l, value: '' }
    - { reg: r9l, value: '' }
    - { reg: r10l, value: '' }
    - { reg: r11l, value: '' }
    - { reg: r12l, value: '' }
    - { reg: r13l, value: '' }
    - { reg: r14l, value: '' }
    - { reg: r15l, value: '' } }
constants:       []
machineFunctionInfo: {}
crashOrder:     4
body:             |
  bb.0:
    liveins: $rbp
  
    PUSH64r $rbp, implicit-def $rsp, implicit $rsp, debug-location !DILocation(line: 33, scope: !7)
    $rbp = MOV64rr $rsp, debug-location !DILocation(line: 33, scope: !7)
    $rsp = SUB64ri8 $rsp, 16, implicit-def $eflags, debug-location !DILocation(line: 33, scope: !7)
    MOV32mi $rbp, 1, $noreg, -4, $noreg, 0, debug-location !DILocation(line: 33, scope: !7)
    CALL64pcrel32 @f, csr_64, implicit $rsp, implicit $ssp, implicit-def $xmm0, implicit-def $xmm0, implicit-def $xmm0, debug-location !DILocation(line: 34, column: 15, scope: !7)
    crash-start MOVSSmr $rbp, 1, $noreg, -8, $noreg, $xmm0, debug-location !DILocation(line: 34, column: 9, scope: !7)
    $xmm0 = MOVSSrm $rbp, 1, $noreg, -8, $noreg, debug-location !DILocation(line: 35, column: 18, scope: !7)
    $xmm0 = CVTSS2SDrr_Int $xmm0, $xmm0, implicit $mxcsr, debug-location !DILocation(line: 35, column: 18, scope: !7)
    $rdi = MOV64ri 4202520, debug-location !DILocation(line: 35, column: 3, scope: !7)
    $al = MOV8ri 1, debug-location !DILocation(line: 35, column: 3, scope: !7)
    CALL64pcrel32 @"printf@plt", csr_64, implicit $rsp, implicit $ssp, implicit-def $eax, debug-location !DILocation(line: 35, column: 3, scope: !7)
    $ecx = XOR32rr undef $ecx, undef $ecx, implicit-def $eflags, debug-location !DILocation(line: 35, column: 3, scope: !7)
    MOV32mr $rbp, 1, $noreg, -12, $noreg, $eax, debug-location !DILocation(line: 35, column: 3, scope: !7)
    $eax = MOV32rr $ecx, debug-location !DILocation(line: 36, column: 3, scope: !7)
    $rsp = ADD64ri8 $rsp, 16, implicit-def $eflags, debug-location !DILocation(line: 36, column: 3, scope: !7)
    $rbp = POP64r implicit-def $rsp, implicit $rsp, debug-location !DILocation(line: 36, column: 3, scope: !7)
    RETQ debug-location !DILocation(line: 36, column: 3, scope: !7)

...
---
name:            _start
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
registers:       []
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
regInfo:         { GPRegs: 
    - { reg: rax, value: '' }
    - { reg: rbx, value: '0x0000000000000000' }
    - { reg: rcx, value: '' }
    - { reg: rdx, value: '' }
    - { reg: rdi, value: '' }
    - { reg: rsi, value: '' }
    - { reg: rbp, value: '0x0000000000000000' }
    - { reg: rsp, value: '0x00007ffe988e81e0' }
    - { reg: r8, value: '' }
    - { reg: r9, value: '' }
    - { reg: r10, value: '' }
    - { reg: r11, value: '' }
    - { reg: r12, value: '0x0000000000401060' }
    - { reg: r13, value: '0x00007ffe988e81f0' }
    - { reg: r14, value: '0x0000000000000000' }
    - { reg: r15, value: '0x0000000000000000' }
    - { reg: rip, value: '0x0000000000401089' }
    - { reg: rflags, value: '' }
    - { reg: cs, value: '' }
    - { reg: fs, value: '' }
    - { reg: gs, value: '' }
    - { reg: ss, value: '' }
    - { reg: ds, value: '' }
    - { reg: es, value: '' }
    - { reg: eax, value: '' }
    - { reg: ebx, value: '0x00000000' }
    - { reg: ecx, value: '' }
    - { reg: edx, value: '' }
    - { reg: edi, value: '' }
    - { reg: esi, value: '' }
    - { reg: ebp, value: '0x988e80a0' }
    - { reg: esp, value: '0x988e80a0' }
    - { reg: r8d, value: '' }
    - { reg: r9d, value: '' }
    - { reg: r10d, value: '' }
    - { reg: r11d, value: '' }
    - { reg: r12d, value: '' }
    - { reg: r13d, value: '' }
    - { reg: r14d, value: '' }
    - { reg: r15d, value: '' }
    - { reg: ax, value: '' }
    - { reg: bx, value: '' }
    - { reg: cx, value: '' }
    - { reg: dx, value: '' }
    - { reg: di, value: '' }
    - { reg: si, value: '' }
    - { reg: bp, value: '' }
    - { reg: sp, value: '0x80a0' }
    - { reg: r8w, value: '' }
    - { reg: r9w, value: '' }
    - { reg: r10w, value: '' }
    - { reg: r11w, value: '' }
    - { reg: r12w, value: '' }
    - { reg: r13w, value: '' }
    - { reg: r14w, value: '' }
    - { reg: r15w, value: '' }
    - { reg: ah, value: '' }
    - { reg: bh, value: '' }
    - { reg: ch, value: '' }
    - { reg: dh, value: '' }
    - { reg: al, value: '' }
    - { reg: bl, value: '' }
    - { reg: cl, value: '' }
    - { reg: dl, value: '' }
    - { reg: dil, value: '' }
    - { reg: sil, value: '' }
    - { reg: bpl, value: '' }
    - { reg: spl, value: '' }
    - { reg: r8l, value: '' }
    - { reg: r9l, value: '' }
    - { reg: r10l, value: '' }
    - { reg: r11l, value: '' }
    - { reg: r12l, value: '' }
    - { reg: r13l, value: '' }
    - { reg: r14l, value: '' }
    - { reg: r15l, value: '' } }
constants:       []
machineFunctionInfo: {}
crashOrder:     6
body:             |
  bb.0:
    liveins: $rdx, $rax
  
    $ebp = XOR32rr undef $ebp, undef $ebp, implicit-def $eflags
    $r9 = MOV64rr $rdx
    $rsi = POP64r implicit-def $rsp, implicit $rsp
    $rdx = MOV64rr $rsp
    $rsp = AND64ri8 $rsp, -16, implicit-def $eflags
    PUSH64r $rax, implicit-def $rsp, implicit $rsp
    PUSH64r $rsp, implicit-def $rsp, implicit $rsp
    $r8 = MOV64ri32 4199120
    $rcx = MOV64ri32 4199008
    $rdi = MOV64ri32 4198944
    CALL64pcrel32 @"__libc_start_main@plt", csr_64, implicit $rsp, implicit $ssp
    crash-start HLT

...
