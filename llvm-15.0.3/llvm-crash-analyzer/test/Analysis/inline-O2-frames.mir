##include <stdio.h>
#
#int * global_a;
#void func1(){
#   global_a = 0x0fffffff; // blame
#}
#void func2(){
#    *global_a = 20; // crash here
#}
#
#void caller1(){
#                func1(); // func1 not in bt
#                func2();
#}
#
#int main(){
#    caller1();
#     printf("%d", *global_a);
#}
# $ clang -g -O2 test.c
# $ $ llvm-crash-analyzer --core-file=core.a.out.67959 a.out -print-decompiled-mir=test.mir

# RUN: %llvm-crash-analyzer-ta %s | FileCheck %s
# CHECK: Blame Function is func1 

--- |
  ; ModuleID = './a.out'
  source_filename = "./a.out"
  target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
  
  ; Materializable
  define void @caller1() !dbg !2 {
  entry:
    unreachable
  }
  
  ; Materializable
  define void @func2() !dbg !5 {
  entry:
    unreachable
  }
  
  ; Materializable
  define void @main() !dbg !6 {
  entry:
    unreachable
  }
  
  ; Materializable
  define void @func1() !dbg !7 {
  entry:
    unreachable
  }
  
  declare void @printf()
  
  !llvm.dbg.cu = !{!0}
  
  !0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "llvm-crash-analyzer", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
  !1 = !DIFile(filename: "/nobackup/djtodoro/llvm_trunk/NEW/llvm-crash-analyzer/CISCO-git/test-dfg/inlining/test.c", directory: "/")
  !2 = distinct !DISubprogram(name: "caller1", linkageName: "caller1", scope: null, file: !1, line: 1, type: !3, scopeLine: 1, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !4)
  !3 = !DISubroutineType(types: !4)
  !4 = !{}
  !5 = distinct !DISubprogram(name: "func2", linkageName: "func2", scope: null, file: !1, line: 1, type: !3, scopeLine: 1, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !4)
  !6 = distinct !DISubprogram(name: "main", linkageName: "main", scope: null, file: !1, line: 1, type: !3, scopeLine: 1, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !4)
  !7 = distinct !DISubprogram(name: "func1", linkageName: "func1", scope: null, file: !1, line: 1, type: !3, scopeLine: 1, spFlags: DISPFlagDefinition | DISPFlagOptimized, retainedNodes: !4)

...
---
name:            func2
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
registers:       []
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
regInfo:         { GPRegs: [] }
constants:       []
machineFunctionInfo: {}
crashOrder:     1
body:             |
  bb.0:
    NOOP

...
---
name:            caller1
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
registers:       []
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
regInfo:         { GPRegs: [] }
constants:       []
machineFunctionInfo: {}
crashOrder:     2
body:             |
  bb.0:
    NOOP

...
---
name:            main
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
registers:       []
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
regInfo:         { GPRegs: 
    - { reg: rax, value: '0x0000000000401190' }
    - { reg: rbx, value: '0x0000000000000000' }
    - { reg: rcx, value: '0x00000000004011c0' }
    - { reg: rdx, value: '0x00007ffc6040d5d8' }
    - { reg: rdi, value: '0x0000000000000001' }
    - { reg: rsi, value: '0x00007ffc6040d5c8' }
    - { reg: rbp, value: '0x0000000000000000' }
    - { reg: rsp, value: '0x00007ffc6040d4e0' }
    - { reg: r8, value: '0x00007fc47ca21e80' }
    - { reg: r9, value: '0x0000000000000000' }
    - { reg: r10, value: '0x00007ffc6040d020' }
    - { reg: r11, value: '0x00007fc47c67b460' }
    - { reg: r12, value: '0x0000000000401060' }
    - { reg: r13, value: '0x00007ffc6040d5c0' }
    - { reg: r14, value: '0x0000000000000000' }
    - { reg: r15, value: '0x0000000000000000' }
    - { reg: rip, value: '0x000000000040119c' }
    - { reg: rflags, value: '0x0000000000010246' }
    - { reg: cs, value: '0x0000000000000033' }
    - { reg: fs, value: '0x0000000000000000' }
    - { reg: gs, value: '0x0000000000000000' }
    - { reg: ss, value: '0x000000000000002b' }
    - { reg: ds, value: '0x0000000000000000' }
    - { reg: es, value: '0x0000000000000000' }
    - { reg: eax, value: '0x00401190' }
    - { reg: ebx, value: '0x00000000' }
    - { reg: ecx, value: '0x004011c0' }
    - { reg: edx, value: '0x6040d5d8' }
    - { reg: edi, value: '0x00000001' }
    - { reg: esi, value: '0x6040d5c8' }
    - { reg: ebp, value: '0x00000000' }
    - { reg: esp, value: '0x6040d4e0' }
    - { reg: r8d, value: '0x7ca21e80' }
    - { reg: r9d, value: '0x00000000' }
    - { reg: r10d, value: '0x6040d020' }
    - { reg: r11d, value: '0x7c67b460' }
    - { reg: r12d, value: '0x00401060' }
    - { reg: r13d, value: '0x6040d5c0' }
    - { reg: r14d, value: '0x00000000' }
    - { reg: r15d, value: '0x00000000' }
    - { reg: ax, value: '0x1190' }
    - { reg: bx, value: '0x0000' }
    - { reg: cx, value: '0x11c0' }
    - { reg: dx, value: '0xd5d8' }
    - { reg: di, value: '0x0001' }
    - { reg: si, value: '0xd5c8' }
    - { reg: bp, value: '0x0000' }
    - { reg: sp, value: '0xd4e0' }
    - { reg: r8w, value: '0x1e80' }
    - { reg: r9w, value: '0x0000' }
    - { reg: r10w, value: '0xd020' }
    - { reg: r11w, value: '0xb460' }
    - { reg: r12w, value: '0x1060' }
    - { reg: r13w, value: '0xd5c0' }
    - { reg: r14w, value: '0x0000' }
    - { reg: r15w, value: '0x0000' }
    - { reg: ah, value: '0x11' }
    - { reg: bh, value: '0x00' }
    - { reg: ch, value: '0x11' }
    - { reg: dh, value: '0xd5' }
    - { reg: al, value: '0x90' }
    - { reg: bl, value: '0x00' }
    - { reg: cl, value: '0xc0' }
    - { reg: dl, value: '0xd8' }
    - { reg: dil, value: '0x01' }
    - { reg: sil, value: '0xc8' }
    - { reg: bpl, value: '0x00' }
    - { reg: spl, value: '0xe0' }
    - { reg: r8l, value: '0x80' }
    - { reg: r9l, value: '0x00' }
    - { reg: r10l, value: '0x20' }
    - { reg: r11l, value: '0x60' }
    - { reg: r12l, value: '0x60' }
    - { reg: r13l, value: '0xc0' }
    - { reg: r14l, value: '0x00' }
    - { reg: r15l, value: '0x00' } }
constants:       []
machineFunctionInfo: {}
crashOrder:     3
body:             |
  bb.0:
    liveins: $rax, $rip
  
    PUSH64r $rax, implicit-def $rsp, implicit $rsp, debug-location !DILocation(line: 17, scope: !6)
    crash-start MOV64mi32 $rip, 1, $noreg, 11932, $noreg, 268435455, debug-location !DILocation(line: 5, column: 13, scope: !7)
    MOV32mi $noreg, 1, $noreg, 268435455, $noreg, 20, debug-location !DILocation(line: 8, column: 15, scope: !5)
    $edi = MOV32ri 4202512, debug-location !DILocation(line: 19, column: 6, scope: !6)
    $esi = MOV32ri 20, debug-location !DILocation(line: 19, column: 6, scope: !6)
    $eax = XOR32rr undef $eax, undef $eax, implicit-def $eflags, debug-location !DILocation(line: 19, column: 6, scope: !6)
    CALL64pcrel32 @printf, csr_64, implicit $rsp, implicit $ssp, implicit-def $eax, implicit-def $eax, debug-location !DILocation(line: 19, column: 6, scope: !6)
    $eax = XOR32rr undef $eax, undef $eax, implicit-def $eflags, debug-location !DILocation(line: 20, column: 1, scope: !6)
    $rcx = POP64r implicit-def $rsp, implicit $rsp, debug-location !DILocation(line: 20, column: 1, scope: !6)
    RETQ debug-location !DILocation(line: 20, column: 1, scope: !6)

...
