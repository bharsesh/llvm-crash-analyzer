##include <stdio.h>
##include <stdlib.h>
#struct node {
#int a;
#char *b;
#int *c;
#};
#
#void foo(struct node *p, char *arg) {
#  p = malloc(sizeof(struct node));
#  char *x = p->b +1000; // invalid address
#  *arg = *x;
#}
#
#int main() {
#  struct node *n;
#  char c[10];
#  foo(n, &c);
#  printf("%s", c);
#  return 0;
#}
#
# XFAIL: *
# RUN: %llvm-crash-analyzer-ta --debug-only=taint-dfg  %s | FileCheck %s
# CHECK: Blame Function is foo
# CHECK: Blame line: 11

# Correct blame function but the blame line can be improved ? Currently we report line 12 (*arg = *x).
--- |
  ; ModuleID = 'a.out'
  source_filename = "a.out"
  target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
  
  ; Materializable
  define void @foo() !dbg !2 {
  entry:
    unreachable
  }
  
  ; Materializable
  define void @main() !dbg !5 {
  entry:
    unreachable
  }
  
  ; Materializable
  define void @malloc() {
  entry:
    unreachable
  }
  
  ; Materializable
  define void @printf() {
  entry:
    unreachable
  }
  
  !llvm.dbg.cu = !{!0}
  
  !0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "llvm-crash-analyzer", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
  !1 = !DIFile(filename: "/auto/compiler-migration/bseshadr/pac/llvm-crash-anal/pactest/badoffset0.c", directory: "/")
  !2 = distinct !DISubprogram(name: "foo", linkageName: "foo", scope: null, file: !1, line: 1, type: !3, scopeLine: 1, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !4)
  !3 = !DISubroutineType(types: !4)
  !4 = !{}
  !5 = distinct !DISubprogram(name: "main", linkageName: "main", scope: null, file: !1, line: 1, type: !3, scopeLine: 1, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !4)

...
---
name:            foo
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
registers:       []
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
regInfo:         { GPRegs: 
    - { reg: rax, value: '0x00000000000003e8' }
    - { reg: rbx, value: '0x0000000000000000' }
    - { reg: rcx, value: '0x00000000017222a0' }
    - { reg: rdx, value: '0x00000000017222a0' }
    - { reg: rdi, value: '0x0000000000000004' }
    - { reg: rsi, value: '0x00000000017222b0' }
    - { reg: rbp, value: '0x00007ffde0eb8730' }
    - { reg: rsp, value: '0x00007ffde0eb8710' }
    - { reg: r8, value: '0x00007fce0e9a49e8' }
    - { reg: r9, value: '0x0000000000000003' }
    - { reg: r10, value: '0x0000000000000000' }
    - { reg: r11, value: '0x0000000000000000' }
    - { reg: r12, value: '0x0000000000400500' }
    - { reg: r13, value: '0x00007ffde0eb8840' }
    - { reg: r14, value: '0x0000000000000000' }
    - { reg: r15, value: '0x0000000000000000' }
    - { reg: rip, value: '0x0000000000400624' }
    - { reg: rflags, value: '0x0000000000010206' }
    - { reg: cs, value: '0x0000000000000033' }
    - { reg: fs, value: '0x0000000000000000' }
    - { reg: gs, value: '0x0000000000000000' }
    - { reg: ss, value: '0x000000000000002b' }
    - { reg: ds, value: '0x0000000000000000' }
    - { reg: es, value: '0x0000000000000000' }
    - { reg: eax, value: '0x000003e8' }
    - { reg: ebx, value: '0x00000000' }
    - { reg: ecx, value: '0x017222a0' }
    - { reg: edx, value: '0x017222a0' }
    - { reg: edi, value: '0x00000004' }
    - { reg: esi, value: '0x017222b0' }
    - { reg: ebp, value: '0xe0eb8730' }
    - { reg: esp, value: '0xe0eb8710' }
    - { reg: r8d, value: '0x0e9a49e8' }
    - { reg: r9d, value: '0x00000003' }
    - { reg: r10d, value: '0x00000000' }
    - { reg: r11d, value: '0x00000000' }
    - { reg: r12d, value: '0x00400500' }
    - { reg: r13d, value: '0xe0eb8840' }
    - { reg: r14d, value: '0x00000000' }
    - { reg: r15d, value: '0x00000000' }
    - { reg: ax, value: '0x03e8' }
    - { reg: bx, value: '0x0000' }
    - { reg: cx, value: '0x22a0' }
    - { reg: dx, value: '0x22a0' }
    - { reg: di, value: '0x0004' }
    - { reg: si, value: '0x22b0' }
    - { reg: bp, value: '0x8730' }
    - { reg: sp, value: '0x8710' }
    - { reg: r8w, value: '0x49e8' }
    - { reg: r9w, value: '0x0003' }
    - { reg: r10w, value: '0x0000' }
    - { reg: r11w, value: '0x0000' }
    - { reg: r12w, value: '0x0500' }
    - { reg: r13w, value: '0x8840' }
    - { reg: r14w, value: '0x0000' }
    - { reg: r15w, value: '0x0000' }
    - { reg: ah, value: '0x03' }
    - { reg: bh, value: '0x00' }
    - { reg: ch, value: '0x22' }
    - { reg: dh, value: '0x22' }
    - { reg: al, value: '0xe8' }
    - { reg: bl, value: '0x00' }
    - { reg: cl, value: '0xa0' }
    - { reg: dl, value: '0xa0' }
    - { reg: dil, value: '0x04' }
    - { reg: sil, value: '0xb0' }
    - { reg: bpl, value: '0x30' }
    - { reg: spl, value: '0x10' }
    - { reg: r8l, value: '0xe8' }
    - { reg: r9l, value: '0x03' }
    - { reg: r10l, value: '0x00' }
    - { reg: r11l, value: '0x00' }
    - { reg: r12l, value: '0x00' }
    - { reg: r13l, value: '0x40' }
    - { reg: r14l, value: '0x00' }
    - { reg: r15l, value: '0x00' } }
constants:       []
machineFunctionInfo: {}
crashOrder:     1
body:             |
  bb.0:
    liveins: $rbp, $rdi, $rsi
  
    PUSH64r $rbp, implicit-def $rsp, implicit $rsp, debug-location !DILocation(line: 9, scope: !2)
    $rbp = MOV64rr $rsp, debug-location !DILocation(line: 9, scope: !2)
    $rsp = SUB64ri8 $rsp, 32, implicit-def $eflags, debug-location !DILocation(line: 9, scope: !2)
    MOV64mr $rbp, 1, $noreg, -8, $noreg, $rdi, debug-location !DILocation(line: 9, scope: !2)
    MOV64mr $rbp, 1, $noreg, -16, $noreg, $rsi, debug-location !DILocation(line: 9, scope: !2)
    $edi = MOV32ri 24, debug-location !DILocation(line: 10, column: 7, scope: !2)
    CALL64pcrel32 @malloc, csr_64, implicit $rsp, implicit $ssp, implicit-def $rax, implicit-def $rax, implicit-def $rax, implicit-def $rax, implicit-def $rax, debug-location !DILocation(line: 10, column: 7, scope: !2)
    MOV64mr $rbp, 1, $noreg, -8, $noreg, $rax, debug-location !DILocation(line: 10, column: 5, scope: !2)
    $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg, debug-location !DILocation(line: 11, column: 13, scope: !2)
    $rax = MOV64rm $rax, 1, $noreg, 8, $noreg, debug-location !DILocation(line: 11, column: 16, scope: !2)
    ADD64i32 1000, implicit-def $rax, implicit-def $eflags, implicit $rax, debug-location !DILocation(line: 11, column: 18, scope: !2)
    MOV64mr $rbp, 1, $noreg, -24, $noreg, $rax, debug-location !DILocation(line: 11, column: 9, scope: !2)
    $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg, debug-location !DILocation(line: 12, column: 11, scope: !2)
    $cl = crash-start MOV8rm $rax, 1, $noreg, 0, $noreg, debug-location !DILocation(line: 12, column: 10, scope: !2)
    $rax = MOV64rm $rbp, 1, $noreg, -16, $noreg, debug-location !DILocation(line: 12, column: 4, scope: !2)
    MOV8mr $rax, 1, $noreg, 0, $noreg, $cl, debug-location !DILocation(line: 12, column: 8, scope: !2)
    $rsp = ADD64ri8 $rsp, 32, implicit-def $eflags, debug-location !DILocation(line: 13, column: 1, scope: !2)
    $rbp = POP64r implicit-def $rsp, implicit $rsp, debug-location !DILocation(line: 13, column: 1, scope: !2)
    RETQ debug-location !DILocation(line: 13, column: 1, scope: !2)

...
---
name:            main
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
registers:       []
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
regInfo:         { GPRegs: 
    - { reg: rax, value: '' }
    - { reg: rbx, value: '0x0000000000000000' }
    - { reg: rcx, value: '' }
    - { reg: rdx, value: '' }
    - { reg: rdi, value: '' }
    - { reg: rsi, value: '' }
    - { reg: rbp, value: '0x00007ffde0eb8760' }
    - { reg: rsp, value: '0x00007ffde0eb8740' }
    - { reg: r8, value: '' }
    - { reg: r9, value: '' }
    - { reg: r10, value: '' }
    - { reg: r11, value: '' }
    - { reg: r12, value: '0x0000000000400500' }
    - { reg: r13, value: '0x00007ffde0eb8840' }
    - { reg: r14, value: '0x0000000000000000' }
    - { reg: r15, value: '0x0000000000000000' }
    - { reg: rip, value: '0x000000000040065f' }
    - { reg: rflags, value: '' }
    - { reg: cs, value: '' }
    - { reg: fs, value: '' }
    - { reg: gs, value: '' }
    - { reg: ss, value: '' }
    - { reg: ds, value: '' }
    - { reg: es, value: '' }
    - { reg: eax, value: '' }
    - { reg: ebx, value: '0x00000000' }
    - { reg: ecx, value: '' }
    - { reg: edx, value: '' }
    - { reg: edi, value: '' }
    - { reg: esi, value: '' }
    - { reg: ebp, value: '0xe0eb8730' }
    - { reg: esp, value: '0xe0eb8710' }
    - { reg: r8d, value: '' }
    - { reg: r9d, value: '' }
    - { reg: r10d, value: '' }
    - { reg: r11d, value: '' }
    - { reg: r12d, value: '' }
    - { reg: r13d, value: '' }
    - { reg: r14d, value: '' }
    - { reg: r15d, value: '' }
    - { reg: ax, value: '' }
    - { reg: bx, value: '' }
    - { reg: cx, value: '' }
    - { reg: dx, value: '' }
    - { reg: di, value: '' }
    - { reg: si, value: '' }
    - { reg: bp, value: '' }
    - { reg: sp, value: '0x8710' }
    - { reg: r8w, value: '' }
    - { reg: r9w, value: '' }
    - { reg: r10w, value: '' }
    - { reg: r11w, value: '' }
    - { reg: r12w, value: '' }
    - { reg: r13w, value: '' }
    - { reg: r14w, value: '' }
    - { reg: r15w, value: '' }
    - { reg: ah, value: '' }
    - { reg: bh, value: '' }
    - { reg: ch, value: '' }
    - { reg: dh, value: '' }
    - { reg: al, value: '' }
    - { reg: bl, value: '' }
    - { reg: cl, value: '' }
    - { reg: dl, value: '' }
    - { reg: dil, value: '' }
    - { reg: sil, value: '' }
    - { reg: bpl, value: '' }
    - { reg: spl, value: '' }
    - { reg: r8l, value: '' }
    - { reg: r9l, value: '' }
    - { reg: r10l, value: '' }
    - { reg: r11l, value: '' }
    - { reg: r12l, value: '' }
    - { reg: r13l, value: '' }
    - { reg: r14l, value: '' }
    - { reg: r15l, value: '' } }
constants:       []
machineFunctionInfo: {}
crashOrder:     2
body:             |
  bb.0:
    liveins: $rbp
  
    PUSH64r $rbp, implicit-def $rsp, implicit $rsp, debug-location !DILocation(line: 15, scope: !5)
    $rbp = MOV64rr $rsp, debug-location !DILocation(line: 15, scope: !5)
    $rsp = SUB64ri8 $rsp, 32, implicit-def $eflags, debug-location !DILocation(line: 15, scope: !5)
    MOV32mi $rbp, 1, $noreg, -4, $noreg, 0, debug-location !DILocation(line: 15, scope: !5)
    $rdi = MOV64rm $rbp, 1, $noreg, -16, $noreg, debug-location !DILocation(line: 18, column: 7, scope: !5)
    $rax = LEA64r $rbp, 1, $noreg, -26, $noreg, debug-location !DILocation(line: 18, column: 10, scope: !5)
    $rsi = MOV64rr $rax, debug-location !DILocation(line: 18, column: 3, scope: !5)
    CALL64pcrel32 @foo, csr_64, implicit $rsp, implicit $ssp, debug-location !DILocation(line: 18, column: 3, scope: !5)
    $rsi = crash-start LEA64r $rbp, 1, $noreg, -26, $noreg
    $rdi = MOV64ri 4196136, debug-location !DILocation(line: 19, column: 3, scope: !5)
    $al = MOV8ri 0, debug-location !DILocation(line: 19, column: 3, scope: !5)
    CALL64pcrel32 @printf, csr_64, implicit $rsp, implicit $ssp, implicit-def $eax, debug-location !DILocation(line: 19, column: 3, scope: !5)
    $ecx = XOR32rr undef $ecx, undef $ecx, implicit-def $eflags, debug-location !DILocation(line: 19, column: 3, scope: !5)
    MOV32mr $rbp, 1, $noreg, -32, $noreg, $eax, debug-location !DILocation(line: 19, column: 3, scope: !5)
    $eax = MOV32rr $ecx, debug-location !DILocation(line: 20, column: 3, scope: !5)
    $rsp = ADD64ri8 $rsp, 32, implicit-def $eflags, debug-location !DILocation(line: 20, column: 3, scope: !5)
    $rbp = POP64r implicit-def $rsp, implicit $rsp, debug-location !DILocation(line: 20, column: 3, scope: !5)
    RETQ debug-location !DILocation(line: 20, column: 3, scope: !5)

...
---
name:            malloc
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
registers:       []
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
regInfo:         { GPRegs: [] }
constants:       []
machineFunctionInfo: {}
crashOrder:     0
body:             |
  bb.0:
    liveins: $rip
  
    JMP64m $rip, 1, $noreg, 2100010, $noreg
  
  bb.1:
    PUSH64i32 1, implicit-def $rsp, implicit $rsp
    crash-start JMP_4 4195536
  
  bb.2:

...
---
name:            printf
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
registers:       []
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
regInfo:         { GPRegs: [] }
constants:       []
machineFunctionInfo: {}
crashOrder:     0
body:             |
  bb.0:
    liveins: $rip
  
    JMP64m $rip, 1, $noreg, 2100018, $noreg
  
  bb.1:
    PUSH64i32 0, implicit-def $rsp, implicit $rsp
    crash-start JMP_4 4195536
  
  bb.2:

...
