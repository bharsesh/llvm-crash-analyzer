## This is reproducer (compiled with `clang -g -O0`):

###include <stdio.h>
## typedef struct inside_str {
##   int y;
##   int x;
## } nested_str;
## typedef struct node {
##   char *x;
##   int *val;  
##   nested_str * val2;
## } info;
## __attribute__((noinline))
## void print_info (info *node) {
##   printf("\n %d", node->val2->x);
## }
## __attribute__((always_inline))
## static void func1() { 
##   info node;
##   char c;
##   nested_str n = {10,20};
##   node.val = NULL;
##   node.val2 = &n;
##   print_info(&node);
##   node.val2 = NULL;
##   print_info(&node);
##   node.x = &c;
##   print_info(&node);
## }
## __attribute__((always_inline))
## static void func2() {
##   func1();
## }
## int main() {
##   func1();
##   return 0; 
## }

# RUN: %llvm-crash-analyzer --print-potential-crash-cause-loc --core-file=%S/Inputs/core.inline-in-the-middle --print-decompiled-mir=%t.mir %S/Inputs/inline-in-the-middle.out < %s 2>&1 | FileCheck %s

# CHECK: Blame Function is func1
# CHECK: From File {{.*}}/m.c:27:13

# RUN: cat %t.mir | FileCheck --check-prefix=CHECK-MIR %s

# CHECK-MIR: name:            main
# CHECK-MIR: CALL64pcrel32 @print_info
# CHECK-MIR: CALL64pcrel32 @print_info
# CHECK-MIR-NEXT: $rax = crash-start LEA64r $rbp

