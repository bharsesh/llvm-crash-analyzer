## Test case compiled with clang -O0 -g
## #include <stdio.h>
##
## void foo(int *p, int val) {
##   int x = -5000000;
##   if (val <= 0) {
##     p = p + x;
##   }
##   else {
##     p = 0;
##   }
##   printf("%d", *p);
## }
##
## int main() {
##  int a = 10 ;
##  foo(&a, -1);
##  return 0;
## }

# RUN: %llvm-crash-analyzer-ta --debug-only=taint-dfg %s | FileCheck %s

## The option --debug-only=taint-dfg should report
## Blame line: 7
## Blame line: 10

# CHECK: Blame Function is foo

--- |
  ; ModuleID = 'secondCase'
  source_filename = "secondCase"
  target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
  
  ; Materializable
  define void @foo() !dbg !2 {
  entry:
    unreachable
  }
  
  ; Materializable
  define void @main() !dbg !5 {
  entry:
    unreachable
  }
  
  ; Materializable
  define void @printf() {
  entry:
    unreachable
  }
  
  !llvm.dbg.cu = !{!0}
  
  !0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "llvm-crash-analyzer", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
  !1 = !DIFile(filename: "/nobackup/djtodoro/llvm_trunk/NEW/llvm-crash-analyzer/CISCO-git/test-dfg/multiple-paths/new-tests/second-case.c", directory: "/")
  !2 = distinct !DISubprogram(name: "foo", linkageName: "foo", scope: null, file: !1, line: 1, type: !3, scopeLine: 1, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !4)
  !3 = !DISubroutineType(types: !4)
  !4 = !{}
  !5 = distinct !DISubprogram(name: "main", linkageName: "main", scope: null, file: !1, line: 1, type: !3, scopeLine: 1, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !4)

...
---
name:            foo
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
registers:       []
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
regInfo:         { GPRegs: 
    - { reg: rax, value: '0x00007fffe79b3388' }
    - { reg: rbx, value: '0x0000000000000000' }
    - { reg: rcx, value: '0xfffffffffeced300' }
    - { reg: rdx, value: '0x00007fffe8cc6188' }
    - { reg: rdi, value: '0x00007fffe8cc6088' }
    - { reg: rsi, value: '0x00000000ffffffff' }
    - { reg: rbp, value: '0x00007fffe8cc6070' }
    - { reg: rsp, value: '0x00007fffe8cc6060' }
    - { reg: r8, value: '0x00007f10a8c00e80' }
    - { reg: r9, value: '0x0000000000000000' }
    - { reg: r10, value: '0x00007fffe8cc5be0' }
    - { reg: r11, value: '0x00007f10a885a460' }
    - { reg: r12, value: '0x0000000000401060' }
    - { reg: r13, value: '0x00007fffe8cc6170' }
    - { reg: r14, value: '0x0000000000000000' }
    - { reg: r15, value: '0x0000000000000000' }
    - { reg: rip, value: '0x0000000000401194' }
    - { reg: rflags, value: '0x0000000000010207' }
    - { reg: cs, value: '0x0000000000000033' }
    - { reg: fs, value: '0x0000000000000000' }
    - { reg: gs, value: '0x0000000000000000' }
    - { reg: ss, value: '0x000000000000002b' }
    - { reg: ds, value: '0x0000000000000000' }
    - { reg: es, value: '0x0000000000000000' }
    - { reg: eax, value: '0xe79b3388' }
    - { reg: ebx, value: '0x00000000' }
    - { reg: ecx, value: '0xfeced300' }
    - { reg: edx, value: '0xe8cc6188' }
    - { reg: edi, value: '0xe8cc6088' }
    - { reg: esi, value: '0xffffffff' }
    - { reg: ebp, value: '0xe8cc6070' }
    - { reg: esp, value: '0xe8cc6060' }
    - { reg: r8d, value: '0xa8c00e80' }
    - { reg: r9d, value: '0x00000000' }
    - { reg: r10d, value: '0xe8cc5be0' }
    - { reg: r11d, value: '0xa885a460' }
    - { reg: r12d, value: '0x00401060' }
    - { reg: r13d, value: '0xe8cc6170' }
    - { reg: r14d, value: '0x00000000' }
    - { reg: r15d, value: '0x00000000' }
    - { reg: ax, value: '0x3388' }
    - { reg: bx, value: '0x0000' }
    - { reg: cx, value: '0xd300' }
    - { reg: dx, value: '0x6188' }
    - { reg: di, value: '0x6088' }
    - { reg: si, value: '0xffff' }
    - { reg: bp, value: '0x6070' }
    - { reg: sp, value: '0x6060' }
    - { reg: r8w, value: '0x0e80' }
    - { reg: r9w, value: '0x0000' }
    - { reg: r10w, value: '0x5be0' }
    - { reg: r11w, value: '0xa460' }
    - { reg: r12w, value: '0x1060' }
    - { reg: r13w, value: '0x6170' }
    - { reg: r14w, value: '0x0000' }
    - { reg: r15w, value: '0x0000' }
    - { reg: ah, value: '0x33' }
    - { reg: bh, value: '0x00' }
    - { reg: ch, value: '0xd3' }
    - { reg: dh, value: '0x61' }
    - { reg: al, value: '0x88' }
    - { reg: bl, value: '0x00' }
    - { reg: cl, value: '0x00' }
    - { reg: dl, value: '0x88' }
    - { reg: dil, value: '0x88' }
    - { reg: sil, value: '0xff' }
    - { reg: bpl, value: '0x70' }
    - { reg: spl, value: '0x60' }
    - { reg: r8l, value: '0x80' }
    - { reg: r9l, value: '0x00' }
    - { reg: r10l, value: '0xe0' }
    - { reg: r11l, value: '0x60' }
    - { reg: r12l, value: '0x60' }
    - { reg: r13l, value: '0x70' }
    - { reg: r14l, value: '0x00' }
    - { reg: r15l, value: '0x00' } }
constants:       []
machineFunctionInfo: {}
crashOrder:     1
body:             |
  bb.0:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $rbp, $rdi, $esi
  
    PUSH64r $rbp, implicit-def $rsp, implicit $rsp, debug-location !DILocation(line: 4, scope: !2)
    $rbp = MOV64rr $rsp, debug-location !DILocation(line: 4, scope: !2)
    $rsp = SUB64ri8 $rsp, 16, implicit-def $eflags, debug-location !DILocation(line: 4, scope: !2)
    MOV64mr $rbp, 1, $noreg, -8, $noreg, $rdi, debug-location !DILocation(line: 4, scope: !2)
    MOV32mr $rbp, 1, $noreg, -12, $noreg, $esi, debug-location !DILocation(line: 4, scope: !2)
    MOV32mi $rbp, 1, $noreg, -16, $noreg, 4289967296, debug-location !DILocation(line: 5, column: 7, scope: !2)
    CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 0, implicit-def $eflags, debug-location !DILocation(line: 6, column: 11, scope: !2)
    JCC_4 %bb.2, 15, implicit $eflags, debug-location !DILocation(line: 6, column: 7, scope: !2)
  
  bb.1:
    successors: %bb.3(0x80000000)
    liveins: $rbp
  
    $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg, debug-location !DILocation(line: 7, column: 9, scope: !2)
    $rcx = MOVSX64rm32 $rbp, 1, $noreg, -16, $noreg, debug-location !DILocation(line: 7, column: 11, scope: !2)
    $rcx = SHL64ri $rcx, 2, implicit-def $eflags, debug-location !DILocation(line: 7, column: 11, scope: !2)
    $rax = ADD64rr $rax, $rcx, implicit-def $eflags, debug-location !DILocation(line: 7, column: 11, scope: !2)
    MOV64mr $rbp, 1, $noreg, -8, $noreg, $rax, debug-location !DILocation(line: 7, column: 7, scope: !2)
    JMP_4 %bb.3, debug-location !DILocation(line: 8, column: 3, scope: !2)
  
  bb.2:
    successors: %bb.3(0x80000000)
    liveins: $rbp
  
    MOV64mi32 $rbp, 1, $noreg, -8, $noreg, 0, debug-location !DILocation(line: 10, column: 7, scope: !2)
  
  bb.3:
    liveins: $rbp
  
    $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg, debug-location !DILocation(line: 12, column: 17, scope: !2)
    $esi = crash-start MOV32rm $rax, 1, $noreg, 0, $noreg, debug-location !DILocation(line: 12, column: 16, scope: !2)
    $rdi = MOV64ri 4202512, debug-location !DILocation(line: 12, column: 3, scope: !2)
    $al = MOV8ri 0, debug-location !DILocation(line: 12, column: 3, scope: !2)
    CALL64pcrel32 @printf, csr_64, implicit $rsp, implicit $ssp, debug-location !DILocation(line: 12, column: 3, scope: !2)
    $rsp = ADD64ri8 $rsp, 16, implicit-def $eflags, debug-location !DILocation(line: 13, column: 1, scope: !2)
    $rbp = POP64r implicit-def $rsp, implicit $rsp, debug-location !DILocation(line: 13, column: 1, scope: !2)
    RET64 debug-location !DILocation(line: 13, column: 1, scope: !2)

...
---
name:            main
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
registers:       []
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
regInfo:         { GPRegs: 
    - { reg: rax, value: '' }
    - { reg: rbx, value: '0x0000000000000000' }
    - { reg: rcx, value: '' }
    - { reg: rdx, value: '' }
    - { reg: rdi, value: '' }
    - { reg: rsi, value: '' }
    - { reg: rbp, value: '0x00007fffe8cc6090' }
    - { reg: rsp, value: '0x00007fffe8cc6080' }
    - { reg: r8, value: '' }
    - { reg: r9, value: '' }
    - { reg: r10, value: '' }
    - { reg: r11, value: '' }
    - { reg: r12, value: '0x0000000000401060' }
    - { reg: r13, value: '0x00007fffe8cc6170' }
    - { reg: r14, value: '0x0000000000000000' }
    - { reg: r15, value: '0x0000000000000000' }
    - { reg: rip, value: '0x00000000004011d4' }
    - { reg: rflags, value: '' }
    - { reg: cs, value: '' }
    - { reg: fs, value: '' }
    - { reg: gs, value: '' }
    - { reg: ss, value: '' }
    - { reg: ds, value: '' }
    - { reg: es, value: '' }
    - { reg: eax, value: '' }
    - { reg: ebx, value: '0x00000000' }
    - { reg: ecx, value: '' }
    - { reg: edx, value: '' }
    - { reg: edi, value: '' }
    - { reg: esi, value: '' }
    - { reg: ebp, value: '0xe8cc6070' }
    - { reg: esp, value: '0xe8cc6060' }
    - { reg: r8d, value: '' }
    - { reg: r9d, value: '' }
    - { reg: r10d, value: '' }
    - { reg: r11d, value: '' }
    - { reg: r12d, value: '' }
    - { reg: r13d, value: '' }
    - { reg: r14d, value: '' }
    - { reg: r15d, value: '' }
    - { reg: ax, value: '' }
    - { reg: bx, value: '' }
    - { reg: cx, value: '' }
    - { reg: dx, value: '' }
    - { reg: di, value: '' }
    - { reg: si, value: '' }
    - { reg: bp, value: '' }
    - { reg: sp, value: '0x6060' }
    - { reg: r8w, value: '' }
    - { reg: r9w, value: '' }
    - { reg: r10w, value: '' }
    - { reg: r11w, value: '' }
    - { reg: r12w, value: '' }
    - { reg: r13w, value: '' }
    - { reg: r14w, value: '' }
    - { reg: r15w, value: '' }
    - { reg: ah, value: '' }
    - { reg: bh, value: '' }
    - { reg: ch, value: '' }
    - { reg: dh, value: '' }
    - { reg: al, value: '' }
    - { reg: bl, value: '' }
    - { reg: cl, value: '' }
    - { reg: dl, value: '' }
    - { reg: dil, value: '' }
    - { reg: sil, value: '' }
    - { reg: bpl, value: '' }
    - { reg: spl, value: '' }
    - { reg: r8l, value: '' }
    - { reg: r9l, value: '' }
    - { reg: r10l, value: '' }
    - { reg: r11l, value: '' }
    - { reg: r12l, value: '' }
    - { reg: r13l, value: '' }
    - { reg: r14l, value: '' }
    - { reg: r15l, value: '' } }
constants:       []
machineFunctionInfo: {}
crashOrder:     2
body:             |
  bb.0:
    liveins: $rbp
  
    PUSH64r $rbp, implicit-def $rsp, implicit $rsp, debug-location !DILocation(line: 15, scope: !5)
    $rbp = MOV64rr $rsp, debug-location !DILocation(line: 15, scope: !5)
    $rsp = SUB64ri8 $rsp, 16, implicit-def $eflags, debug-location !DILocation(line: 15, scope: !5)
    MOV32mi $rbp, 1, $noreg, -4, $noreg, 0, debug-location !DILocation(line: 15, scope: !5)
    MOV32mi $rbp, 1, $noreg, -8, $noreg, 10, debug-location !DILocation(line: 16, column: 6, scope: !5)
    $rdi = LEA64r $rbp, 1, $noreg, -8, $noreg, debug-location !DILocation(line: 17, column: 2, scope: !5)
    $esi = MOV32ri 4294967295, debug-location !DILocation(line: 17, column: 2, scope: !5)
    CALL64pcrel32 @foo, csr_64, implicit $rsp, implicit $ssp, implicit-def $eax, implicit-def $eax, debug-location !DILocation(line: 17, column: 2, scope: !5)
    $eax = crash-start XOR32rr undef $eax, undef $eax, implicit-def $eflags
    $rsp = ADD64ri8 $rsp, 16, implicit-def $eflags, debug-location !DILocation(line: 18, column: 2, scope: !5)
    $rbp = POP64r implicit-def $rsp, implicit $rsp, debug-location !DILocation(line: 18, column: 2, scope: !5)
    RET64 debug-location !DILocation(line: 18, column: 2, scope: !5)

...
---
name:            printf
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
registers:       []
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
regInfo:         { GPRegs: [] }
constants:       []
machineFunctionInfo: {}
crashOrder:     0
body:             |
  bb.0:
    liveins: $rip
  
    JMP64m $rip, 1, $noreg, 12258, $noreg
  
  bb.1:
    PUSH64i32 0, implicit-def $rsp, implicit $rsp
    crash-start JMP_4 4198432
  
  bb.2:

...
